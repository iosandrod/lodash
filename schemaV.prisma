generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Warehouse { 
  id        String   @id @default(uuid())
  name      String
  location  String
  manager   String
  capacity  Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Inventory Inventory[]
  StockInOrder StockInOrder[]
  StockOutOrder StockOutOrder[]
  StockTransferOrderSource StockTransferOrder[] @relation("SourceWarehouse")
  StockTransferOrderDestination StockTransferOrder[] @relation("DestinationWarehouse")
}

model Inventory {
  id            String   @id @default(uuid())
  warehouseId   String
  productId     String
  quantity      Int
  reorderLevel  Int
  status        String
  lastUpdated   DateTime @updatedAt

  Warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  Product   Product   @relation(fields: [productId], references: [id])
}

model InventoryTransaction {
  id              String   @id @default(uuid())
  warehouseId     String
  productId       String
  transactionType String
  quantity        Int
  transactionDate DateTime @default(now())
  operator        String
  remarks         String?

  Warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  Product   Product   @relation(fields: [productId], references: [id])
}

model StockInOrder {
  id           String   @id @default(uuid())
  warehouseId  String
  supplierId   String
  orderDate    DateTime @default(now())
  status       String
  totalQuantity Int
  totalCost    Float
  remarks      String?

  Warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  Supplier  Supplier  @relation(fields: [supplierId], references: [id])
  StockInDetail StockInDetail[]
}

model StockInDetail {
  id             String   @id @default(uuid())
  stockInOrderId String
  productId      String
  quantity       Int
  unitPrice      Float
  totalPrice     Float
  batchNumber    String?
  expiryDate     DateTime?

  StockInOrder StockInOrder @relation(fields: [stockInOrderId], references: [id])
  Product      Product      @relation(fields: [productId], references: [id])
}

model StockOutOrder {
  id           String   @id @default(uuid())
  warehouseId  String
  customerId   String
  orderDate    DateTime @default(now())
  status       String
  totalQuantity Int
  totalCost    Float
  remarks      String?

  Warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  Customer  Customer  @relation(fields: [customerId], references: [id])
  StockOutDetail StockOutDetail[]
}

model StockOutDetail {
  id             String   @id @default(uuid())
  stockOutOrderId String
  productId      String
  quantity       Int
  unitPrice      Float
  totalPrice     Float
  batchNumber    String?

  StockOutOrder StockOutOrder @relation(fields: [stockOutOrderId], references: [id])
  Product       Product       @relation(fields: [productId], references: [id])
}

model StockTransferOrder {
  id                       String   @id @default(uuid())
  sourceWarehouseId        String
  destinationWarehouseId   String
  transferDate             DateTime @default(now())
  status                   String
  totalQuantity            Int
  remarks                  String?

  SourceWarehouse      Warehouse @relation("SourceWarehouse", fields: [sourceWarehouseId], references: [id])
  DestinationWarehouse Warehouse @relation("DestinationWarehouse", fields: [destinationWarehouseId], references: [id])
  StockTransferDetail  StockTransferDetail[]
}

model StockTransferDetail {
  id                   String   @id @default(uuid())
  stockTransferOrderId String
  productId            String
  quantity             Int
  remarks              String?

  StockTransferOrder StockTransferOrder @relation(fields: [stockTransferOrderId], references: [id])
  Product            Product            @relation(fields: [productId], references: [id])
}

model StockAdjustment {
  id                String   @id @default(uuid())
  warehouseId       String
  productId         String
  adjustmentType    String
  adjustmentQuantity Int
  adjustmentDate    DateTime @default(now())
  operator          String
  remarks           String?

  Warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  Product   Product   @relation(fields: [productId], references: [id])
}

model InventoryAlert {
  id              String   @id @default(uuid())
  warehouseId     String
  productId       String
  alertLevel      String
  threshold       Int
  currentQuantity Int
  alertDate       DateTime @default(now())

  Warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  Product   Product   @relation(fields: [productId], references: [id])
}

model BatchInfo {
  id              String   @id @default(uuid())
  productId       String
  batchNumber     String
  manufactureDate DateTime
  expiryDate      DateTime
  quantity        Int
  status          String

  Product Product @relation(fields: [productId], references: [id])
}

model Supplier {
  id            String   @id @default(uuid())
  name          String
  contactPerson String
  phone         String
  email         String
  address       String
  status        String
  remarks       String?
  StockInOrder  StockInOrder[]
}

model Customer {
  id      String   @id @default(uuid())
  name    String
  phone   String
  email   String?
  address String?
  status  String
  remarks String?
  StockOutOrder StockOutOrder[]
}

model Product {
  id           String   @id @default(uuid())
  name         String
  description  String?
  category     String
  unitPrice    Float
  unit         String
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Inventory    Inventory[]
  StockInDetail StockInDetail[]
  StockOutDetail StockOutDetail[]
  StockTransferDetail StockTransferDetail[]
  InventoryTransaction InventoryTransaction[]
  InventoryAlert InventoryAlert[]
  BatchInfo     BatchInfo[]
}
